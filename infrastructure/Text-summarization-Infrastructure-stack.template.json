{
  "Resources": {
    "BucketRecordings5338A378": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "LogFilePrefix": "Server-Access-Logs"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketRecordings/Resource"
      }
    },
    "BucketRecordingsPolicyF0E6CC61": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BucketRecordings5338A378"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketRecordings5338A378",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketRecordings5338A378",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketRecordings5338A378",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketRecordings5338A378",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketRecordings/Policy/Resource"
      }
    },
    "BucketRecordingsAutoDeleteObjectsCustomResource28D7E665": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketRecordings5338A378"
        }
      },
      "DependsOn": [
        "BucketRecordingsPolicyF0E6CC61"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketRecordings/AutoDeleteObjectsCustomResource/Default"
      }
    },
    "BucketRecordingsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3TranscribeA990AD2FA4748394": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaS3Transcribe051BE228",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": "146641573825",
        "SourceArn": {
          "Fn::GetAtt": [
            "BucketRecordings5338A378",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketRecordings/AllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3TranscribeA990AD2F"
      }
    },
    "BucketRecordingsNotifications5C953E78": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketRecordings5338A378"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".mp4"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3Transcribe051BE228",
                  "Arn"
                ]
              }
            },
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".mp3"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3Transcribe051BE228",
                  "Arn"
                ]
              }
            },
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".wav"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3Transcribe051BE228",
                  "Arn"
                ]
              }
            },
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".m4a"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3Transcribe051BE228",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "BucketRecordingsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3TranscribeA990AD2FA4748394"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketRecordings/Notifications/Resource"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          {
            "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
      }
    },
    "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-146641573825-eu-west-2",
          "S3Key": "bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be.zip"
        },
        "Timeout": 900,
        "MemorySize": 128,
        "Handler": "__entrypoint__.handler",
        "Role": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Description": {
          "Fn::Join": [
            "",
            [
              "Lambda function for auto-deleting objects in ",
              {
                "Ref": "BucketRecordings5338A378"
              },
              " S3 bucket."
            ]
          ]
        }
      },
      "DependsOn": [
        "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
        "aws:asset:path": "asset.bdb08b9984816ecf43301a0c6d8913e270ee2448940b6b95e430dd222a4d90be",
        "aws:asset:property": "Code"
      }
    },
    "BucketTranscriptions97F46036": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "LogFilePrefix": "Server-Access-Logs"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketTranscriptions/Resource"
      }
    },
    "BucketTranscriptionsPolicy6944E2BD": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BucketTranscriptions97F46036"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketTranscriptions97F46036",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketTranscriptions97F46036",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketTranscriptions97F46036",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketTranscriptions97F46036",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketTranscriptions/Policy/Resource"
      }
    },
    "BucketTranscriptionsAutoDeleteObjectsCustomResource6114663A": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketTranscriptions97F46036"
        }
      },
      "DependsOn": [
        "BucketTranscriptionsPolicy6944E2BD"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketTranscriptions/AutoDeleteObjectsCustomResource/Default"
      }
    },
    "BucketTranscriptionsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SageMakerS3A9F86E2509A4BF31": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaS3SageMakerS37C28A9E7",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": "146641573825",
        "SourceArn": {
          "Fn::GetAtt": [
            "BucketTranscriptions97F46036",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketTranscriptions/AllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SageMakerS3A9F86E25"
      }
    },
    "BucketTranscriptionsNotifications10E182A3": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketTranscriptions97F46036"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".json"
                    },
                    {
                      "Name": "prefix",
                      "Value": "TranscribeOutput/"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3SageMakerS37C28A9E7",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "BucketTranscriptionsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SageMakerS3A9F86E2509A4BF31"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketTranscriptions/Notifications/Resource"
      }
    },
    "BucketPredictions3F000233": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        },
        "LoggingConfiguration": {
          "LogFilePrefix": "Server-Access-Logs"
        },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true
        },
        "Tags": [
          {
            "Key": "aws-cdk:auto-delete-objects",
            "Value": "true"
          }
        ],
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketPredictions/Resource"
      }
    },
    "BucketPredictionsPolicy7E55CD85": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "BucketPredictions3F000233"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": "false"
                }
              },
              "Effect": "Deny",
              "Principal": {
                "AWS": "*"
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketPredictions3F000233",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketPredictions3F000233",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": [
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*"
              ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
                    "Arn"
                  ]
                }
              },
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketPredictions3F000233",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketPredictions3F000233",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketPredictions/Policy/Resource"
      }
    },
    "BucketPredictionsAutoDeleteObjectsCustomResource5CF41992": {
      "Type": "Custom::S3AutoDeleteObjects",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketPredictions3F000233"
        }
      },
      "DependsOn": [
        "BucketPredictionsPolicy7E55CD85"
      ],
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketPredictions/AutoDeleteObjectsCustomResource/Default"
      }
    },
    "BucketPredictionsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SNSE6A73010FD265546": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaS3SNSABBAABA9",
            "Arn"
          ]
        },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": "146641573825",
        "SourceArn": {
          "Fn::GetAtt": [
            "BucketPredictions3F000233",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketPredictions/AllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SNSE6A73010"
      }
    },
    "BucketPredictionsNotificationsD4178D0F": {
      "Type": "Custom::S3BucketNotifications",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
            "Arn"
          ]
        },
        "BucketName": {
          "Ref": "BucketPredictions3F000233"
        },
        "NotificationConfiguration": {
          "LambdaFunctionConfigurations": [
            {
              "Events": [
                "s3:ObjectCreated:*"
              ],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".out"
                    }
                  ]
                }
              },
              "LambdaFunctionArn": {
                "Fn::GetAtt": [
                  "LambdaS3SNSABBAABA9",
                  "Arn"
                ]
              }
            }
          ]
        },
        "Managed": true
      },
      "DependsOn": [
        "BucketPredictionsAllowBucketNotificationsToTextsummarizationInfrastructurestackLambdaS3SNSE6A73010FD265546"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketPredictions/Notifications/Resource"
      }
    },
    "Key961B73FD": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "KeyPolicy": {
          "Statement": [
            {
              "Action": "kms:*",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::146641573825:root"
                    ]
                  ]
                }
              },
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "EnableKeyRotation": true
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/Key/Resource"
      }
    },
    "MeetingSummary4B306EAB": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "MeetingSummary",
        "KmsMasterKeyId": {
          "Fn::GetAtt": [
            "Key961B73FD",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/MeetingSummary/Resource"
      }
    },
    "MeetingSummaryTokenSubscription1AEC8BD64": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "email",
        "TopicArn": {
          "Ref": "MeetingSummary4B306EAB"
        },
        "Endpoint": {
          "Fn::Select": [
            0,
            {
              "Ref": "ParticipatorEmailAddress"
            }
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/MeetingSummary/TokenSubscription:1/Resource"
      }
    },
    "hfsagemakerexecutionrole6481FA1C": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "sagemaker.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/hf_sagemaker_execution_role/Resource"
      }
    },
    "hfsagemakerexecutionroleDefaultPolicyC67188A8": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sagemaker:CreateEndpoint",
                "sagemaker:CreateEndpointConfig",
                "sagemaker:InvokeEndpoint",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetAuthorizationToken",
                "cloudwatch:PutMetricData",
                "cloudwatch:GetMetricData",
                "cloudwatch:GetMetricStatistics",
                "cloudwatch:ListMetrics",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "s3:CreateBucket",
                "s3:ListBucket",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:PutObject"
              ],
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "hfsagemakerexecutionroleDefaultPolicyC67188A8",
        "Roles": [
          {
            "Ref": "hfsagemakerexecutionrole6481FA1C"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/hf_sagemaker_execution_role/DefaultPolicy/Resource"
      }
    },
    "hfmodel": {
      "Type": "AWS::SageMaker::Model",
      "Properties": {
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "hfsagemakerexecutionrole6481FA1C",
            "Arn"
          ]
        },
        "ModelName": "bart-large-summarization-model",
        "PrimaryContainer": {
          "Environment": {
            "HF_MODEL_ID": "linydub/bart-large-samsum",
            "HF_TASK": "summarization"
          },
          "Image": "763104351884.dkr.ecr.eu-west-2.amazonaws.com/huggingface-pytorch-inference:1.8.1-transformers4.10.2-cpu-py36-ubuntu18.04"
        }
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/hf_model"
      }
    },
    "hfendpointconfig": {
      "Type": "AWS::SageMaker::EndpointConfig",
      "Properties": {
        "ProductionVariants": [
          {
            "InitialInstanceCount": 1,
            "InitialVariantWeight": 1,
            "InstanceType": "ml.m5.large",
            "ModelName": "bart-large-summarization-model",
            "VariantName": "bart-large-summarization-model"
          }
        ],
        "AsyncInferenceConfig": {
          "OutputConfig": {
            "S3OutputPath": {
              "Fn::Join": [
                "",
                [
                  "https://s3.eu-west-2.",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/",
                  {
                    "Ref": "BucketPredictions3F000233"
                  }
                ]
              ]
            }
          }
        },
        "EndpointConfigName": "bart-large-summarization-endpoint-config"
      },
      "DependsOn": [
        "hfmodel"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/hf_endpoint_config"
      }
    },
    "summarizationendpoint": {
      "Type": "AWS::SageMaker::Endpoint",
      "Properties": {
        "EndpointConfigName": "bart-large-summarization-endpoint-config",
        "EndpointName": "bart-large-summarization-endpoint"
      },
      "DependsOn": [
        "hfendpointconfig"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/summarization_endpoint"
      }
    },
    "LambdaS3TranscribeServiceRole646D3C9F": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3Transcribe/ServiceRole/Resource"
      }
    },
    "LambdaS3TranscribeServiceRoleDefaultPolicy7D8DCFAC": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketRecordings5338A378",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketRecordings5338A378",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:log-group:/aws/lambda/LambdaS3Transcribe:*"
            },
            {
              "Action": [
                "transcribe:GetTranscriptionJob",
                "transcribe:StartTranscriptionJob"
              ],
              "Effect": "Allow",
              "Resource": "*"
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketTranscriptions97F46036",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketTranscriptions97F46036",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaS3TranscribeServiceRoleDefaultPolicy7D8DCFAC",
        "Roles": [
          {
            "Ref": "LambdaS3TranscribeServiceRole646D3C9F"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3Transcribe/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "LambdaS3Transcribe051BE228": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-146641573825-eu-west-2",
          "S3Key": "fcda74f644f21e6418b365510885960b423c6a92e99fd81520207d23583a9514.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaS3TranscribeServiceRole646D3C9F",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": {
              "Ref": "BucketTranscriptions97F46036"
            }
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.8"
      },
      "DependsOn": [
        "LambdaS3TranscribeServiceRoleDefaultPolicy7D8DCFAC",
        "LambdaS3TranscribeServiceRole646D3C9F"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3Transcribe/Resource",
        "aws:asset:path": "asset.fcda74f644f21e6418b365510885960b423c6a92e99fd81520207d23583a9514",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:PutBucketNotification",
              "Effect": "Allow",
              "Resource": "*"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "Roles": [
          {
            "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
      }
    },
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
        "Code": {
          "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n    response_status = \"SUCCESS\"\n    error_message = \"\"\n    try:\n        props = event[\"ResourceProperties\"]\n        bucket = props[\"BucketName\"]\n        notification_configuration = props[\"NotificationConfiguration\"]\n        request_type = event[\"RequestType\"]\n        managed = props.get('Managed', 'true').lower() == 'true'\n        stack_id = event['StackId']\n\n        if managed:\n          config = handle_managed(request_type, notification_configuration)\n        else:\n          config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)\n\n        put_bucket_notification_configuration(bucket, config)\n    except Exception as e:\n        logging.exception(\"Failed to put bucket notification configuration\")\n        response_status = \"FAILED\"\n        error_message = f\"Error: {str(e)}. \"\n    finally:\n        submit_response(event, context, response_status, error_message)\n\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration):\n\n  # find external notifications\n  external_notifications = find_external_notifications(bucket, stack_id)\n\n  # if delete, that's all we need\n  if request_type == 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\n    return notification\n\n  # otherwise, merge external with incoming config and augment with id\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n  return notifications\n\n\ndef find_external_notifications(bucket, stack_id):\n  existing_notifications = get_bucket_notification_configuration(bucket)\n  external_notifications = {}\n  for t in CONFIGURATION_TYPES:\n    # if the notification was created by us, we know what id to expect\n    # so we can filter by it.\n    external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n\n  return external_notifications\n\n\ndef get_bucket_notification_configuration(bucket):\n  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\n\ndef put_bucket_notification_configuration(bucket, notification_configuration):\n  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n    response_body = json.dumps(\n        {\n            \"Status\": response_status,\n            \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n            \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n            \"StackId\": event[\"StackId\"],\n            \"RequestId\": event[\"RequestId\"],\n            \"LogicalResourceId\": event[\"LogicalResourceId\"],\n            \"NoEcho\": False,\n        }\n    ).encode(\"utf-8\")\n    headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n    try:\n        req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n        with urllib.request.urlopen(req) as response:\n            print(response.read().decode(\"utf-8\"))\n        print(\"Status code: \" + response.reason)\n    except Exception as e:\n        print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
            "Arn"
          ]
        },
        "Runtime": "python3.7",
        "Timeout": 300
      },
      "DependsOn": [
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
        "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
      }
    },
    "LambdaS3SageMakerS3ServiceRole431DE073": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SageMakerS3/ServiceRole/Resource"
      }
    },
    "LambdaS3SageMakerS3ServiceRoleDefaultPolicy400B56B5": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketTranscriptions97F46036",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketTranscriptions97F46036",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:log-group:/aws/lambda/LambdaS3SageMakerS3:*"
            },
            {
              "Action": "sagemaker:InvokeEndpointAsync",
              "Effect": "Allow",
              "Resource": "arn:aws:sagemaker:eu-west-2:146641573825:endpoint/bart-large-summarization-endpoint"
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaS3SageMakerS3ServiceRoleDefaultPolicy400B56B5",
        "Roles": [
          {
            "Ref": "LambdaS3SageMakerS3ServiceRole431DE073"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SageMakerS3/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "LambdaS3SageMakerS37C28A9E7": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-146641573825-eu-west-2",
          "S3Key": "4b26d95924641543e59f20c9a167b4d217b36875f76f4964520918c4406a59aa.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaS3SageMakerS3ServiceRole431DE073",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": {
              "Ref": "BucketTranscriptions97F46036"
            },
            "SM_ENDPOINT": "bart-large-summarization-endpoint"
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.8"
      },
      "DependsOn": [
        "LambdaS3SageMakerS3ServiceRoleDefaultPolicy400B56B5",
        "LambdaS3SageMakerS3ServiceRole431DE073"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SageMakerS3/Resource",
        "aws:asset:path": "asset.4b26d95924641543e59f20c9a167b4d217b36875f76f4964520918c4406a59aa",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "LambdaS3SNSServiceRoleD3B51C83": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SNS/ServiceRole/Resource"
      }
    },
    "LambdaS3SNSServiceRoleDefaultPolicy4CFE98F1": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*"
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "BucketPredictions3F000233",
                    "Arn"
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "BucketPredictions3F000233",
                          "Arn"
                        ]
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            },
            {
              "Action": "logs:CreateLogGroup",
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:*"
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:logs:eu-west-2:146641573825:log-group:/aws/lambda/LambdaS3SNS:*"
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "MeetingSummary4B306EAB"
              }
            },
            {
              "Action": [
                "kms:GenerateDataKey",
                "kms:Decrypt"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "Key961B73FD",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "LambdaS3SNSServiceRoleDefaultPolicy4CFE98F1",
        "Roles": [
          {
            "Ref": "LambdaS3SNSServiceRoleD3B51C83"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SNS/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "LambdaS3SNSABBAABA9": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "cdk-hnb659fds-assets-146641573825-eu-west-2",
          "S3Key": "b3b93445674105f65fd6c8958c66c2dae84a7aaad05f4a07b17a09ad277d45da.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaS3SNSServiceRoleD3B51C83",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "BUCKET_NAME": {
              "Ref": "BucketPredictions3F000233"
            },
            "EMAIL_TOPIC_ARN": {
              "Ref": "MeetingSummary4B306EAB"
            }
          }
        },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.8"
      },
      "DependsOn": [
        "LambdaS3SNSServiceRoleDefaultPolicy4CFE98F1",
        "LambdaS3SNSServiceRoleD3B51C83"
      ],
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/LambdaS3SNS/Resource",
        "aws:asset:path": "asset.b3b93445674105f65fd6c8958c66c2dae84a7aaad05f4a07b17a09ad277d45da",
        "aws:asset:is-bundled": false,
        "aws:asset:property": "Code"
      }
    },
    "CDKMetadata": {
      "Type": "AWS::CDK::Metadata",
      "Properties": {
        "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VQS0/EIBD+LXun+GiM8eg2ejEmTdf7htLZOrZAw4BmQ/jvUth119P3Yr6ZcM/vHvjtRvxQJYepmrHnYeeEnFiy9oFqHrZeTuBYc9AnVqA1M8rjxT7pIraCILJZqH4QPKQ3LViFRGg0e/VaupUk+8wjmxTx8Aa5MEFkpJPxYRaUq1XIzvckLS7n8WsdGQrFQ2dmWKOMlxsLS61iBCUmsPmqdzPAvMYvelgMatcYfcDx2kkj9V4QgSP+vEJkjSdnVAdkvJVl2R//F7XWfOMAluXB9K0j6lzeCisUOLCRtUf3afRNzZ/44+aLECvrtUMFvCv4C+KG+mSiAQAA"
      },
      "Metadata": {
        "aws:cdk:path": "Text-summarization-Infrastructure-stack/CDKMetadata/Default"
      }
    }
  },
  "Parameters": {
    "ParticipatorEmailAddress": {
      "Type": "CommaDelimitedList",
      "Description": "The e-mail address of those who attended the meeting"
    },
    "BootstrapVersion": {
      "Type": "AWS::SSM::Parameter::Value<String>",
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
    }
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5"
                  ],
                  {
                    "Ref": "BootstrapVersion"
                  }
                ]
              }
            ]
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
        }
      ]
    }
  }
}